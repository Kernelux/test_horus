auto weberMagnitude(const cv::Mat& input, int xPos, int yPos)
{
  auto sum = 0.0;
  auto currentPoint = input.at<uchar>(yPos, xPos) + 1.0;
  for (int i = yPos - 1; i <= yPos + 1; i++)
    {
      if (i >= input.rows || i < 0)
        continue;
        for (int j = xPos - 1; j <= xPos + 1; j++)
          {
            if (j >= input.cols || j < 0)
              continue;
            if (j == xPos && i == yPos)
              continue;
            sum += ((input.at<uchar>(i, j) + 1) - currentPoint);
          }
    }
  sum = sum / currentPoint;
  sum = atan(sum);
  return sum;
}

auto weberOrientation(const cv::Mat& input, int xPos, int yPos)
{
  auto p1  = std::make_pair(xPos, yPos - 1);
  auto p5  = std::make_pair(xPos, yPos + 1);
  auto p3  = std::make_pair(xPos + 1,yPos);
  auto p7  = std::make_pair(xPos - 1,yPos);
  auto vecNum    = std::vector<decltype(p1)>({p1, p5, p3, p7});
  auto vecValues = std::vector<double>({0, 0, 0, 0});
  for (auto i = 0.0; i < vecNum.size(); i++)
    {
      auto tmp = vecNum.at(i);
      if (tmp.first < 0 || tmp.second < 0)
        continue;
      if (tmp.first >= input.cols || tmp.second >= input.rows)
        continue;
      vecValues.at(i) = input.at<uchar>(tmp.second, tmp.first);
    }
  auto v3 = vecValues.at(0) - vecValues.at(1);
  auto v4 = vecValues.at(2) - vecValues.at(3);
  auto thetaPrime = mapTheta(v3, v4);
  // Should do a loop
  if (thetaPrime >= 0 && thetaPrime < 0.15)
    return 1;
  if (thetaPrime >= 0.15 && thetaPrime < 0.35)
    return 2;
  if (thetaPrime >= 0.35 && thetaPrime < 0.5)
    return 3;
  if (thetaPrime >= 0.5 && thetaPrime < 0.65)
    return 4;
  if (thetaPrime >= 0.65 && thetaPrime < 0.85)
    return 5;
  if (thetaPrime >= 0.85 && thetaPrime < M_PI)
    return 6;
  if (thetaPrime >= M_PI && thetaPrime < 1.15 * M_PI)
    return 7;
  if (thetaPrime >= 1.15 * M_PI && thetaPrime < 1.35 * M_PI)
    return 8;
  if (thetaPrime >= 1.35 * M_PI && thetaPrime < 1.5 * M_PI)
    return 9;
  if (thetaPrime >= 1.5  * M_PI && thetaPrime < 1.65 * M_PI)
    return 10;
  if (thetaPrime >= 1.65 * M_PI && thetaPrime < 1.85 * M_PI)
    return  11;
  if (thetaPrime >= 1.85 * M_PI && thetaPrime < 2 * M_PI)
    return  12;
  return 1;
}