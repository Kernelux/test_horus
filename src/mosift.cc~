#include "mosift.hh"


int MoSIFT::findRegion(const float& a)
{
  int region = LEFT;
  int it = 0;
  float angle = angleToRad(a);
  std::vector<int> pos = {RIGHT , RIGHT | TOP, TOP, LEFT | TOP, LEFT};
  for (float i = 22.5; i <= 222.5; i += 45, it++)
      if (cos(angle) >= cos(angleToRad(i)))
        {
          region = pos[it];
          break;
        }
  if (sin(angle) < 0 && region >> 2 == 1)
    region = (region & ~TOP) | BOTTOM;
  return region;
}


int MoSIFT::findRegion(const float& x, const float& y)
{
  float hyp = sqrt(x * x + y * y);
  float coss = x/hyp;
  float sins = y/hyp;
  int region = LEFT;
  int it = 0;
  std::vector<int> pos = {RIGHT , RIGHT | TOP, TOP, LEFT | TOP, LEFT};
  for (float i = 22.5; i <= 222.5; i += 45, it++)
      if (coss >= cos(angleToRad(i)))
        {
          region = pos[it];
          break;
        }
  if (sins < 0 && region >> 2 == 1)
    region = (region & ~TOP) | BOTTOM;
  return region;
}

int MoSIFT::findRegionWithPrecalTrigo(const float& cosF, const float& sinF)
{
  int region = LEFT;
  int it = 0;
  std::vector<int> pos = {RIGHT , RIGHT | TOP, TOP, LEFT | TOP, LEFT};
  for (float i = 22.5; i <= 222.5; i += 45, it++)
      if (cosF >= cos(angleToRad(i)))
        {
          region = pos[it];
          break;
        }
  if (sinF < 0 && region >> 2 == 1)
    region = (region & ~TOP) | BOTTOM;
  return region;
}

float MoSIFT::angleToRad(const float& x)
{
  return x * M_PI / 180.0;
}


std::map<unsigned int, unsigned int> MoSIFT::initMap()
{
  std::map<unsigned int, unsigned int> histo;
  histo.insert(std::make_pair(RIGHT, 0));
  histo.insert(std::make_pair(LEFT, 0));
  histo.insert(std::make_pair(TOP, 0));
  histo.insert(std::make_pair(BOTTOM, 0));
  histo.insert(std::make_pair(RIGHT_BOTTOM, 0));
  histo.insert(std::make_pair(RIGHT_TOP, 0));
  histo.insert(std::make_pair(LEFT_BOTTOM, 0));
  histo.insert(std::make_pair(LEFT_TOP, 0));
  return histo;
}

std::map<unsigned int, unsigned int> MoSIFT::calcHist(const cv::Mat& flowMat,
                                                      const int& size,
                                                      const int& x,
                                                      const int& y,
                                                      const cv::Point2f& original)
{
  int botX = x - size / 2;
  int botY = y - size / 2;
  int topX = x + size / 2;
  int topY = y + size / 2;
  std::map<unsigned int, unsigned int> histo = initMap();
  int region;
  for (int i = botY; i < topY; i++)
    {
      if (i >= flowMat.rows || i < 0)
        continue;
        for (int j = botX; j < topX; j++)
          {
            if (j >= flowMat.cols || j < 0)
              continue;
            auto flow = flowMat.at<cv::Point2f>(i, j);
            auto hyp = sqrt(flow.x * flow.x + flow.y * flow.y);
            auto dist = sqrt((original.x - j) * (original.x - j) + (original.y - i) * (original.y - i));
            flow.x /= hyp;
            flow.y /= hyp;
            region = findRegionWithPrecalTrigo(flow.x, flow.y);
            histo.at(region) = (histo.at(region))  + 10 * (hyp / dist);
          }
    }
  return histo;
}


cv::Mat MoSIFT::createInitialImage( const cv::Mat& img, cv::Mat& dst, float sigma )
{
  if(img.channels() == 3 || img.channels() == 4)
    cvtColor(img, dst, cv::COLOR_BGR2GRAY);
  else
    dst = img.clone();
  float sig_diff;
  sig_diff = sqrtf(std::max(sigma * sigma - SIFT_INIT_SIGMA * SIFT_INIT_SIGMA * 4, 0.01f));
  cv::pyrUp(dst, dst, cv::Size());
  imshow("t", dst);
  //resize(dst, dst, cv::Size(dst.cols*2, dst.rows*2), 0, 0, cv::INTER_LINEAR);
  GaussianBlur(dst, dst, cv::Size(), sig_diff, sig_diff);
  return dst;
}

void MoSIFT::draw(const std::map<unsigned int, unsigned int>& m, const cv::Mat& d, int x, int y)
{
  auto count = 8.0;
  auto i2 = 1.0;
  for (auto& v : m)
    {
      i2 += v.second;
      count++;
    }
  i2 /= count;
  cv::Point coordinate;
  for (auto bin : m)
    {
      auto coef = (bin.second + 0.0) / i2;
      if (bin.first == RIGHT)
        coordinate = cv::Point(x + coef, y);
      else if (bin.first == LEFT)
        coordinate = cv::Point(x - coef, y );
      else if (bin.first == TOP)
        coordinate = cv::Point(x, y + coef);
      else if (bin.first == BOTTOM)
        coordinate = cv::Point(x, y - coef);
      else if (bin.first == RIGHT_BOTTOM)
        coordinate = cv::Point(x + coef, y - coef);
      else if (bin.first == RIGHT_TOP)
        coordinate = cv::Point(x + coef, y + coef);
      else if (bin.first == LEFT_BOTTOM)
        coordinate = cv::Point(x - coef, y - coef);
      else if (bin.first == LEFT_TOP)
        coordinate = cv::Point(x - coef, y + coef);
      cv::arrowedLine(d, cv::Point(x, y), coordinate, cv::Scalar(255, 0, 0));
    }
}

std::vector<float> MoSIFT::concatenateFeatures(std::vector<float>& features, std::map<unsigned int, unsigned int> m)
{
  std::for_each(m.begin(), m.end(), [&features](auto& x){ features.push_back(x.second);});
  return features;
}
